6 / 3 & 4 & 5 & 6 & 7 & 8 / 2025 -- (30m) & (1h30) & (1h30m) & (1h10) & (1h10) & (50m) :
✅ CRUD and Queries DataBase-c15 

6 / 9 & 10 & 11 & 12 / 2025 -- (40m) & (2h) & (1h30) & (2h) :
✅ 5 ERD ➝ relational schema projects + 54 SQL problems - c17

6 / 1 & 2 & 6 & 14 & 15 & 16 & (17-18) / 2025 -- (50m) & (5m) & (30m) & (4h20) & (2h40) & (10m) & (40m) +
6 / 19 & 20 & 21 & 22 / 2025 -- (1h) & (1h) & (25m) & (1h15m) :
✅ programming concepts with c# - c14 (.NET freamwork, prg basics with c#, +2 windows forms projects)

6 / 23 & 24 & 25 / 2025 -- (2h) & (1h25m) & (2h5) :
✅ programming concepts with c# - c16 (OOP)

6 / 25 & 26 & 27 & 28 & 2 & 3 / 2025 -- (52m) & (34m) & (42m) & (24m) & (36m) & (6m + 3h28?) :
✅❌ C# & Database Connectivity - c18 (XML, ADO.NET, SqlDataProvider : SQLServer <=> Console, 3 Tier architecture Project) 

6 / 29 & 30 & 1 & 3 / 2025 -- (1h) & (52m) & (35m) & (0m + 5h43?) :
✅❌ FP & OOP with c++ - c7(BankFP ❌), c8(DataLibraryFP, BankExtentionFP ❌, ATM_systemFP ❌),
c10(stringLibraryOOP ✅ & DataLibraryOOP ❌) Projects


{ for revision :
- Zeller's Congruence for DateLibrary?
- why We can have only one static constructor in a class and it can not have any parameters or access modifiers?
- why : We can only have one destructor in a class. || 
  A destructor cannot have access modifiers, parameters, or return types. || 
  A destructor is called implicitly by the Garbage collector of the .NET Framework. ||
  We cannot overload or inherit destructors. || We cannot define destructors in structs.
- method hiding concept in c#
- C# supports two types of polymorphism:
  compile-time polymorphism (also known as method overloading)
  Runtime polymorphism (also known as method overriding)
  inheritance is also a form of polymorphism known as "subtyping" or "subtype polymorphism".
- .NET class library (by adding and refrencing our new project or exited one or just refrencing it's DLL)
- internal access modifier
- Here are some of the main differences between classes and structures in C#:
  Syntax
  Inheritance: Classes can be inherited, structures can't.
  Default constructor: Classes have a default constructor, Structures don't.
  Reference type vs Value type: Classes are reference types, Structures are value types.
  Performance: Structures stored on the stack, classes in the heap.
  Memory management.
- period class?

-- How does the default constructor work? like how does it initialize the data?
}
