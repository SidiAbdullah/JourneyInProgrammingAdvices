1) Full Stack Desktop Projects :
7 / 2 & 3 & 4 / 2025 -- (36m) & (1h28) & (1h25) :
C# & Database Connectivity - c18 (XML, ADO.NET/ SqlDataProvider/ 2 3_Tier_architecture projects about
SQLServer <=> Console || windows froms, Data(Set, Table, View, Adapter)) ✅ 12 days

7 / 4 & 5 & 10 & 11 & 12 & 29 / 2025 -- (31m) & (8m) & (43m) & (40m) & (1h25) & (0m + 13h33?) == 17h :
Full Real Project - c19 ❌✅ x days

7 / 9 & 10 / 2025 -- (7m) & (1h8) & (11h45?) == 13h:
c# & windows forms - c20 (Share Data between forms, ..) ❌✅ x days

7 / 29 / 2025 -- (0m + 8h) == 8h:
Database Concepts & T-SQL - c21  ❌✅ x days

2) Data Structures (competetive programming) :
7 / 10 & 11 & 12 & 13 & 14 & 15 & 16 / 2025 -- (1h) & (1h8) & (1h) & (16m) & (15m) & (23m) & (4h16),
7 / 17 & 18 & 19 & 20 / 2025 -- (30m) & (13m) & (3h32) & (1h13) == 13h :
DataStructures with c#  - c22 (DataStructures != DataBases, unBoxing, CRUDS and opps on 
collections[Lists, HashTable, Dictionary, hashSet, SortedList, SortedSet, 
SortedDictionary, ArrayList, ObservableCollection, Stacks, Queues, Linked Lists, array,
bitArray, Jagged arrays, Tuples], Interfaces[IEnumerable, ICollection, IList, IDictionary, ISet, IComparable],
general Tree, Binary Tree, Graph, Min and Max Heap, priority queue ..) ✅ 11 days

- Notes
{
  - How to build CRUDS and methods like countItems() on HashTable[Dictionary[SortedList, SortedDictionary]]
    || ObservableCollection || Stacks || Queues || BitArray <=> ByteArray || BitArray.{And, Or, Xor, Not}
    || Graph[Tree[Linked Lists, Binary[Heap[priority queue]]]] from scratch?
  - Linked List is a data structure used to build other data structures like Stack, Queue , and others.
  - why graph with matrix is faster in searching than with list but requires more space?
}
